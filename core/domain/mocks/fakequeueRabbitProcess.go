// Code generated by MockGen. DO NOT EDIT.
// Source: core/domain/queueRabbitProcess.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/marc/workerRabbitMQ-example/core/domain"
	dto "github.com/marc/workerRabbitMQ-example/core/dto"
)

// MockIQueueProcessUseCase is a mock of IQueueProcessUseCase interface.
type MockIQueueProcessUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockIQueueProcessUseCaseMockRecorder
}

// MockIQueueProcessUseCaseMockRecorder is the mock recorder for MockIQueueProcessUseCase.
type MockIQueueProcessUseCaseMockRecorder struct {
	mock *MockIQueueProcessUseCase
}

// NewMockIQueueProcessUseCase creates a new mock instance.
func NewMockIQueueProcessUseCase(ctrl *gomock.Controller) *MockIQueueProcessUseCase {
	mock := &MockIQueueProcessUseCase{ctrl: ctrl}
	mock.recorder = &MockIQueueProcessUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIQueueProcessUseCase) EXPECT() *MockIQueueProcessUseCaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIQueueProcessUseCase) Create(queue *dto.QueueProcessDTO) (*domain.QueueProcess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", queue)
	ret0, _ := ret[0].(*domain.QueueProcess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIQueueProcessUseCaseMockRecorder) Create(queue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIQueueProcessUseCase)(nil).Create), queue)
}

// MockIQueueProcessRepository is a mock of IQueueProcessRepository interface.
type MockIQueueProcessRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIQueueProcessRepositoryMockRecorder
}

// MockIQueueProcessRepositoryMockRecorder is the mock recorder for MockIQueueProcessRepository.
type MockIQueueProcessRepositoryMockRecorder struct {
	mock *MockIQueueProcessRepository
}

// NewMockIQueueProcessRepository creates a new mock instance.
func NewMockIQueueProcessRepository(ctrl *gomock.Controller) *MockIQueueProcessRepository {
	mock := &MockIQueueProcessRepository{ctrl: ctrl}
	mock.recorder = &MockIQueueProcessRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIQueueProcessRepository) EXPECT() *MockIQueueProcessRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIQueueProcessRepository) Create(queue *dto.QueueProcessDTO) (*domain.QueueProcess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", queue)
	ret0, _ := ret[0].(*domain.QueueProcess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIQueueProcessRepositoryMockRecorder) Create(queue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIQueueProcessRepository)(nil).Create), queue)
}
